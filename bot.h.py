# -*- coding: utf-8 -*-
import os
import telebot
from telebot import types
from flask import Flask
from threading import Thread
import re
from datetime import datetime, timedelta
import shutil

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7 –Ω–∞ Render!"

def run():
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)

Thread(target=run).start()
# === –ö—ñ–Ω–µ—Ü—å Flask-–±–ª–æ–∫—É ===


# --- –¢–æ–∫–µ–Ω —ñ ID –≥—Ä—É–ø–∏ ---
TOKEN = os.environ['TOKEN']
GROUP_ID = int(os.environ['GROUP_ID'])
THREAD_ID = int(os.environ.get('THREAD_ID', 0))
ADMIN_ID = int(os.environ.get('ADMIN_ID', 0))  # ID –∞–¥–º—ñ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /getlogs

bot = telebot.TeleBot(TOKEN)
user_state = {}


# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –ª–æ–≥—ñ–≤ ===
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

def log_message(category_name, user_id, text):
    """–ó–∞–ø–∏—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    filename = {
        "–°–∫–∞—Ä–≥–∞": "skarga.log",
        "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è": "propozytsiya.log",
        "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è": "zapytannya.log",
        "–Ü–Ω—à–µ": "inshe.log"
    }.get(category_name, "other.log")

    path = os.path.join(LOG_DIR, filename)
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{now}] user_id={user_id} | text=\"{text}\"\n")

def cleanup_old_logs(days=30):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ N –¥–Ω—ñ–≤"""
    cutoff = datetime.now() - timedelta(days=days)
    for file in os.listdir(LOG_DIR):
        path = os.path.join(LOG_DIR, file)
        if os.path.isfile(path):
            mtime = datetime.fromtimestamp(os.path.getmtime(path))
            if mtime < cutoff:
                os.remove(path)

cleanup_old_logs()


# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
def main_menu():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('üìõ –°–∫–∞—Ä–≥–∞', 'üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è')
    markup.add('‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è', 'üì¨ –Ü–Ω—à–µ')
    return markup


# --- /start ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n"
        "üìõ –°–∫–∞—Ä–≥–∞ / üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ‚Äî –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–æ.\n"
        "‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è / üì¨ –Ü–Ω—à–µ ‚Äî –ø–µ—Ä–µ—Å–∏–ª–∞—é—Ç—å—Å—è –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
        reply_markup=main_menu()
    )


# --- /getlogs (–¥–ª—è –∞–¥–º—ñ–Ω–∞) ---
@bot.message_handler(commands=['getlogs'])
def get_logs(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    if not os.listdir(LOG_DIR):
        bot.send_message(ADMIN_ID, "‚ö†Ô∏è –õ–æ–≥–∏ –ø–æ—Ä–æ–∂–Ω—ñ.")
        return

    zip_path = "logs.zip"
    shutil.make_archive("logs", 'zip', LOG_DIR)
    with open(zip_path, "rb") as f:
        bot.send_document(ADMIN_ID, f)
    os.remove(zip_path)


# --- –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ---
@bot.message_handler(func=lambda message: message.text in ['üìõ –°–∫–∞—Ä–≥–∞', 'üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', '‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è', 'üì¨ –Ü–Ω—à–µ'])
def choose_category(message):
    user_state[message.chat.id] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")


# --- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
@bot.message_handler(func=lambda message: message.chat.id in user_state)
def handle_text(message):
    category = user_state.pop(message.chat.id)
    text = message.text
    user_id = message.chat.id

    # --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
    log_message(category, user_id, text)

    # --- –í—ñ–¥–ø–æ–≤—ñ–¥—ñ ---
    if category == 'üìõ –°–∫–∞—Ä–≥–∞':
        bot.send_message(user_id, "‚úÖ –í–∞—à—É —Å–∫–∞—Ä–≥—É –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–æ–Ω–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        bot.send_message(GROUP_ID, f"üì© *–ù–æ–≤–∞ —Å–∫–∞—Ä–≥–∞:*\n\n{text}", parse_mode="Markdown", message_thread_id=THREAD_ID or None)

    elif category == 'üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è':
        bot.send_message(user_id, "üí¨ –î—è–∫—É—î–º–æ, —â–æ —Ä–æ–±–∏—Ç–µ –Ω–∞—à—É —à–∫–æ–ª—É –∫—Ä–∞—â–æ—é!")
        bot.send_message(GROUP_ID, f"üì© *–ù–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:*\n\n{text}", parse_mode="Markdown", message_thread_id=THREAD_ID or None)
        elif category == '‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è':
        bot.send_message(user_id, "‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ —É—á–Ω—ñ–≤—Å—å–∫–æ–º—É —Å–∞–º–æ–≤—Ä—è–¥—É–≤–∞–Ω–Ω—é. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        bot.send_message(GROUP_ID, f"üì© *–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:*\n\n{text}\n\nüë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}", parse_mode="Markdown", message_thread_id=THREAD_ID or None)

    elif category == 'üì¨ –Ü–Ω—à–µ':
        bot.send_message(user_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ —É—á–Ω—ñ–≤—Å—å–∫–æ–º—É —Å–∞–º–æ–≤—Ä—è–¥—É–≤–∞–Ω–Ω—é. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        bot.send_message(GROUP_ID, f"üì© *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ü–Ω—à–µ):*\n\n{text}\n\nüë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}", parse_mode="Markdown", message_thread_id=THREAD_ID or None)


# --- –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@bot.message_handler(func=lambda message: message.chat.id == GROUP_ID and message.reply_to_message)
def admin_reply(message):
    reply_text = message.text
    original = message.reply_to_message.text

    match = re.search(r'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: (\d+)', original)
    if match:
        user_id = int(match.group(1))
        bot.send_message(user_id, f"üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—á–Ω—ñ–≤—Å—å–∫–æ–≥–æ —Å–∞–º–æ–≤—Ä—è–¥—É–≤–∞–Ω–Ω—è:\n\n{reply_text}")
        bot.reply_to(message, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
bot.polling(non_stop=True)

